# -*- coding: utf-8 -*-
"""sentiment_finetuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13NSQm8v6PbTmBfMMqL6oC0gHrjmL0Tuc

# Fine-tune xlm-roberta-base for text classification task

## Install packages and check device
"""

!pip install datasets seqeval evaluate optimum[exporters] --quiet

import torch

if torch.cuda.is_available():
    print("GPU is enabled.")
    print("device count: {}, current device: {}".format(torch.cuda.device_count(), torch.cuda.current_device()))
else:
    print("GPU is not enabled.")
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

"""## Prepare dataset"""

from datasets import load_dataset

ds = load_dataset("indonlp/indonlu", "smsa")
ds

from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("xlm-roberta-base")

def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

tokenized_datasets = ds.map(tokenize_function, batched=True)

"""## Prepare model"""

from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained("xlm-roberta-base", num_labels=3, torch_dtype="auto")

"""## Prepare training config"""

import numpy as np
import evaluate

metric_f1 = evaluate.load("f1")
metric_recall = evaluate.load("recall")
metric_precision = evaluate.load("precision")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return {
        "f1": metric_f1.compute(predictions=predictions, references=labels, average="micro")["f1"],
        "recall": metric_recall.compute(predictions=predictions, references=labels, average="micro")["recall"],
        "precision": metric_precision.compute(predictions=predictions, references=labels, average="micro")["precision"]
    }

from transformers import TrainingArguments

# TODO Check result of this
training_args = TrainingArguments(
    output_dir = "roberta-sentiment-id",
    log_level = "error",
    num_train_epochs = 5,
    learning_rate = 1e-5,
    weight_decay = 1e-1,
    per_device_train_batch_size = 16,
    per_device_eval_batch_size = 16,
    evaluation_strategy = "epoch",
    fp16 = True,
    logging_steps = len(tokenized_datasets["train"]),
    push_to_hub = False,
    report_to="none",
)

from transformers import Trainer

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    compute_metrics=compute_metrics,
)

"""## Train"""

trainer.train()

"""## Push to hub"""

from google.colab import userdata

hf_token = userdata.get("HF_TOKEN")
model.push_to_hub("arcleife/roberta-sentiment-id", token=hf_token)

"""## Testing the model"""

from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained("arcleife/roberta-sentiment-id", num_labels=3)
tokenizer = AutoTokenizer.from_pretrained("xlm-roberta-base")

from transformers import pipeline

# Labels
# 0 Positive
# 1 Neutral
# 2 Negative

pipe = pipeline("text-classification", model=model, tokenizer=tokenizer)
pipe("Payah lo")

"""# Convert model to ONNX"""

model.save_pretrained("roberta-sentiment-id")

!optimum-cli export onnx --model roberta-sentiment-id --task text-classification --optimize O1 roberta-sentiment-id-onnx

from optimum.onnxruntime import ORTModelForSequenceClassification

model_onnx = ORTModelForSequenceClassification.from_pretrained("roberta-sentiment-id-onnx")

model_onnx.push_to_hub("roberta-sentiment-id-onnx", repository_id="arcleife/roberta-sentiment-id-onnx", token=hf_token)